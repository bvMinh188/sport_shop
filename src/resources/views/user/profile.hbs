<div class="container">
    <div class="row">
        <!-- Th√¥ng tin kh√°ch h√†ng b√™n tr√°i -->
        <div class="col-md-6">
            <div class="customer-info">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3>Th√¥ng tin kh√°ch h√†ng</h3>
                    <button id="editButton" class="btn btn-secondary">Thay ƒë·ªïi th√¥ng tin</button>
                </div>
                <!-- Message container -->
                <div id="messageContainer" class="message-container">
                    <div class="message"></div>
                </div>
                <form id="profileForm" action="/account/updateprofile" method="POST">
                    <div class="form-group mb-3">
                        <label for="customerName">T√™n kh√°ch h√†ng</label>
                        <input type="text" class="form-control" id="customerName" name="username" value="{{userInfo.username}}" readonly>
                    </div>
                    <div class="form-group mb-3">
                        <label for="customerEmail">Email</label>
                        <input type="email" class="form-control" id="customerEmail" name="email" value="{{userInfo.email}}" readonly>
                    </div>
                    <div class="form-group mb-3">
                        <label for="customerPhone">S·ªë ƒëi·ªán tho·∫°i</label>
                        <input type="text" class="form-control" id="customerPhone" name="phone" value="{{userInfo.phone}}" readonly>
                    </div>
                    <div id="saveButtonContainer" style="display: none;">
                        <button type="submit" class="btn btn-primary">L∆∞u th√¥ng tin</button>
                        <button type="button" id="cancelButton" class="btn btn-secondary">H·ªßy</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- L·ªãch s·ª≠ mua h√†ng b√™n ph·∫£i -->
        <div class="col-md-6">
            <div class="order-history">
                <h4>L·ªãch s·ª≠ mua h√†ng</h4>
                {{#each order}}
                <div class="order-item mb-4 p-3 border rounded">
                    <div class="order-id mb-3">
                        <strong>M√£ ƒë∆°n h√†ng:</strong> {{this._id}}
                    </div>
                    <div class="products-container">
                        {{#each this.products}}
                            <div class="order-product mb-3 p-3 border rounded bg-light">
                                <div class="product-info">
                                    <div class="product-name mb-2">
                                        <strong>T√™n s·∫£n ph·∫©m:</strong> {{this.name}}
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <div class="product-size">
                                            <strong>Size:</strong> {{this.size}}
                                        </div>
                                        <div class="product-quantity">
                                            <strong>S·ªë l∆∞·ª£ng:</strong> {{this.quantity}}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        {{/each}}
                    </div>
                    <div class="order-details mt-3 pt-3 border-top">
                        <div class="order-shop mb-2">
                            üõí <strong>T·ªïng gi√°:</strong> {{formatCurrency this.price}}ƒë
                        </div>
                        <div class="order-date mb-2">
                            <strong>Th·ªùi gian ƒë·∫∑t h√†ng:</strong> {{formatDate this.createdAt}}
                        </div>
                        <div class="order-address mb-2">
                            <strong>ƒê·ªãa ch·ªâ:</strong> {{getOrderAddress this}}
                        </div>
                        <div class="order-status mb-2">
                            <strong>Tr·∫°ng th√°i:</strong> <span class="badge {{getStatusClass this.status}}">{{this.status}}</span>
                        </div>
                        {{#if (or (eq this.status "ch·ªù x√°c nh·∫≠n") (eq this.status "ƒë√£ x√°c nh·∫≠n") (eq this.status "ƒëang giao h√†ng"))}}
                            <div class="text-right">
                                <button class="btn btn-danger" data-toggle="modal" data-id="{{this._id}}" data-target="#delete-order-modal">H·ªßy ƒë∆°n h√†ng</button>
                            </div>
                        {{/if}}
                    </div>
                </div>
                {{else}}
                <div class="order-item mb-4 p-3 border rounded">B·∫°n ch∆∞a mua h√†ng</div>
                {{/each}}
            </div>
        </div>
    </div>
</div>


{{!-- Modal X√°c Nh·∫≠n X√≥a --}}
<div id="delete-order-modal" class="modal fade" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">H·ªßy ƒë∆°n h√†ng </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë∆°n h√†ng n√†y kh√¥ng?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">H·ªßy</button>
        <button id="btn-delete-order" type="button" class="btn btn-danger">c√≥</button>
      </div>
    </div>
  </div>
</div>

{{!-- Form ·∫®n --}}
<form name="delete-order-form" method="POST" style="display: none;">
    <input type="hidden" name="_method" value="DELETE">
</form>

<style>
    .message-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        visibility: hidden;
        opacity: 0;
        transition: all 0.3s ease;
        min-width: 250px;
        text-align: center;
    }

    .message {
        padding: 12px 20px;
        border-radius: 8px;
        font-size: 14px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        color: white;
        font-weight: 500;
    }

    .message.success {
        background-color: rgba(40, 167, 69, 0.95);
    }

    .message.error {
        background-color: rgba(220, 53, 69, 0.95);
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translate(-50%, calc(-50% + 20px));
        }
        to {
            opacity: 1;
            transform: translate(-50%, -50%);
        }
    }

    @keyframes fadeOut {
        from {
            opacity: 1;
            transform: translate(-50%, -50%);
        }
        to {
            opacity: 0;
            transform: translate(-50%, calc(-50% - 20px));
        }
    }

    .message-container.show {
        visibility: visible;
        opacity: 1;
        animation: fadeIn 0.3s ease forwards;
    }

    .message-container.hide {
        animation: fadeOut 0.3s ease forwards;
    }

    .order-item {
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .order-id {
        color: #2c3e50;
        font-size: 1.1em;
    }

    .products-container {
        max-height: 400px;
        overflow-y: auto;
    }

    .order-product {
        transition: all 0.3s ease;
    }

    .order-product:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .product-info {
        color: #34495e;
    }

    .product-name {
        color: #2c3e50;
        font-size: 1.05em;
    }

    .order-details {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 5px;
        margin-top: 10px;
    }

    .badge {
        padding: 8px 12px;
        border-radius: 4px;
        font-weight: 500;
    }

    .badge-pending {
        background-color: #ffd700;
        color: #000;
    }

    .badge-confirmed {
        background-color: #17a2b8;
        color: #fff;
    }

    .badge-shipping {
        background-color: #007bff;
        color: #fff;
    }

    .badge-delivered {
        background-color: #28a745;
        color: #fff;
    }

    .badge-cancelled {
        background-color: #dc3545;
        color: #fff;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        var orderId;
        var deleteForm = document.forms['delete-order-form'];
        var btnDeleteOrder = document.getElementById('btn-delete-order');
        const messageContainer = document.querySelector('.message-container');
        const messageElement = messageContainer.querySelector('.message');

        function showMessage(message, type = 'success') {
            const icon = type === 'success' ? 'check-circle' : 'exclamation-circle';
            messageElement.innerHTML = `
                <i class="fas fa-${icon}"></i>
                <span>${message}</span>
            `;
            
            messageElement.className = 'message ' + type;
            messageContainer.classList.remove('hide');
            messageContainer.classList.add('show');
            
            setTimeout(() => {
                messageContainer.classList.remove('show');
                messageContainer.classList.add('hide');
            }, 2000);
        }

        // Khi modal ƒë∆∞·ª£c k√≠ch ho·∫°t
        $('#delete-order-modal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            orderId = button.data('id');
        });

        // Khi nh·∫•n n√∫t "c√≥" trong modal
        btnDeleteOrder.onclick = function() {
            $.ajax({
                url: '/cancel-order/' + orderId + '?_method=DELETE',
                method: 'POST',
                success: function(response) {
                    if (response.message === "H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng") {
                        showMessage('H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng', 'success');
                        setTimeout(() => {
                            $('#delete-order-modal').modal('hide');
                            window.location.href = '/account';
                        }, 2000);
                    } else {
                        showMessage(response.message || 'C√≥ l·ªói x·∫£y ra', 'error');
                    }
                },
                error: function(xhr) {
                    console.error('Error:', xhr.responseJSON);
                    showMessage(xhr.responseJSON?.message || 'C√≥ l·ªói x·∫£y ra khi h·ªßy ƒë∆°n h√†ng', 'error');
                }
            });
        };

        // Edit profile functionality
        const editButton = document.getElementById('editButton');
        const cancelButton = document.getElementById('cancelButton');
        const saveButtonContainer = document.getElementById('saveButtonContainer');
        const form = document.getElementById('profileForm');
        const inputs = form.querySelectorAll('input[readonly]');
        const originalValues = {};

        // Store original values
        inputs.forEach(input => {
            originalValues[input.name] = input.value;
        });

        editButton.addEventListener('click', function() {
            inputs.forEach(input => {
                input.removeAttribute('readonly');
            });
            saveButtonContainer.style.display = 'block';
            editButton.style.display = 'none';
        });

        cancelButton.addEventListener('click', function() {
            inputs.forEach(input => {
                input.setAttribute('readonly', true);
                input.value = originalValues[input.name];
            });
            saveButtonContainer.style.display = 'none';
            editButton.style.display = 'inline-block';
        });

        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            try {
                const response = await fetch('/account/updateprofile', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();
                
                if (result.success) {
                    showMessage(result.message, 'success');
                    inputs.forEach(input => {
                        input.setAttribute('readonly', true);
                        originalValues[input.name] = input.value;
                    });
                    saveButtonContainer.style.display = 'none';
                    editButton.style.display = 'inline-block';
                } else {
                    showMessage(result.message, 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin!', 'error');
            }
        });
    });

    // Add this helper function to your JavaScript
    Handlebars.registerHelper('getStatusClass', function(status) {
        switch(status) {
            case 'ch·ªù x√°c nh·∫≠n':
                return 'badge-pending';
            case 'ƒë√£ x√°c nh·∫≠n':
                return 'badge-confirmed';
            case 'ƒëang giao h√†ng':
                return 'badge-shipping';
            case 'ƒë√£ giao h√†ng':
                return 'badge-delivered';
            case 'ƒë√£ h·ªßy':
                return 'badge-cancelled';
            default:
                return 'badge-secondary';
        }
    });
</script>

